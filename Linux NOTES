<====================== LINUX  NOTES ==========================>

Note:- 

To see list of groups -->
cat /etc/group

To seelist of users-->
cat /etc/passwd


1. Find a File by Name

sudo find 'path' -name 'file name' 

eg:- 
sudo find /home -name "f1.txt"
✅ Effect: Searches for f1.txt inside the /home directory.

±+++++++++……..........


For practising in linux ways:-
i)	Insatall linux OS 
ii)	Use oracle virtual box on chrome 
----------------------------------------------------------------------------------------------------------------------------------
iii)	Use aws ec2 instance ( connect local system to aws linux server using ssh client)
Go to ec2 service  AMI (linux )  instance type (t2.micro free tier) (750 hours free one month)    create key pair ( add name  type RSA  fomat .pem   click create key pair)   allow SSH traffic check the tickbox   LAUNCH INSTANCe

Note :- don’t forget to close ec2 

Downloaded .pes/key pair  file store it in folder and add in C/D drive 

Open git bash on that file

In instances of aws you should click connect using ssh and add 3rd  point(it will alter the file permissions in system) command and last point command in git bash .  

Type yes  yes next  now will connect to server



Linux commands :-

Note :- linux is opensource so everyone modifies it and launches their own OS 
For eg: - kali linux, aws linux,   redhat linux,…

Whoami  to see current user logged in 

Date 

Cal

Cal 2025

Pwd  --> current working directory

Mkdir  --> make directory 

Ls --> listing folders

Ls -r --> rev order

Ls -l --> (long listing) for detailed folder details in asc order 

Ls -lr --> In rev order

Ls -la --> will give all hidden folders as well

Rmdir “foldername” --> remove empty folder only 

Cd ~ --> to return to root folder 

Cd .. --> to take one folder back

Clear 

rmdir -rf "folder name"  ==> recursively forcabely remove folder even if content present in it

rm 'filename' ==> for deleting particular file

touch "filename"  ==> creates new file

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++  Commands in short :- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
ls
rm (remove file) 
cd.. (to back file)
mv (to rename or move file) -->   $ mv remark.tsx remarkchanged.tsx
touch  (creates new file) ==> touch abc.txt
mkdir: mkdir newfolder (creates a new directory called newfolder).
rmdir: rmdir emptyfolder (removes the empty directory named emptyfolder)

cat abc.txt                        :- to see content inside
head abc.txt                     :- to see first 5 lines of text
tail abc.txt                        :- to see last 10 lines of text
grep 'searchterm' abc.txt  :- to search particular text in given file 
wc                                    :- to count total words in text              eg. wc -l
pwd                                :- to  see current working directory
df                                   :- to see disk space
df -h                                :- to see disk space in human readable  format

ip r     :-  to check current ip
free -h :- for RAM storage 
df -kh :-  for disk storage 
lscpu  :- cores
nproc  :- for logical cores 

CURL command :- curl -kv http://IP:port 
where,
curl = tool to make HTTP requests
-k = Ignore SSL certificate errors (used with HTTPS)
-v = Verbose output (shows detailed request and response info)

optional command for CURL :- nc -zv <ip> port 
where ,
nc = netcat (network utility to test connections)
-z = Zero-I/O mode (don’t send data, just check if port is open)
-v = Verbose output (show connection result)



QQQ. what does one file includes ==========>

-rw-r--r-- 1 AAMOCI18274 1049089 315 May  5 16:11 z.sh // what details contained in this after entering ls command?

The details provided for the file z.txt include:

File permissions: l
Number of hard links: 1
Owner: AAMOCI18274
Group: 1049089
File size: 315 (bytes)
Last modified date: May 5
Last modified time: 16:11


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


4th video

---------------- MOVE OR RENAME --------------------------

mv ==> used to rename or move the file
mv 'old filename' 'new filename'  ==> rename
mv 'filename' 'full path'   ==> moving the file to another location

-------------   CREATE READ WRITE --------------------------

cat ==> used to create, write or read the file 

cat 'filename' --> display content
cat >  'filename'   & click ctrl +C  ==> will create new file
cat >> 'filename'  & start writing content & after finished writing click ctrl +C  ==> will help to write content inside file

cat -n 'filename'  ==> will display content with line no.s 

Note:- for duplicate filename, cat file will fully replace the old file and old content will be vanished whereas  
                    while using touch file wont gets fully replaced instead it will only change/update the time of creation

tac 'filename'  ==> will display content in rev order

--------------------- COPY CONTENTS --------------------------

cp 'old filename' 'new filename' ==> for copying files from one file to another file

cat 'filename1' 'filename2' > 'filename3'   ==> copying 2 files and merging it into single file

----------------------- HEAD TAIL -------------------------------

head 'filenam' --> prints first 10 lines 
head -(number) 'filename'         --> print only given no of lines 
head -n -(number) 'filename' 
  
tail 'filenaem' --> prints last 10 lines 

------------------- SEARCHING ----------------------------------------\

GREP ( Global Regular Expression) 

NOTE :-
-grep is case sensitive
-order of -i -n doesn't matter here
-you can use it at the end also it will work

grep 'search anything' 'filename'  --> it is case sensitive so will search only that much matching words

grep -i 'anything' 'filename'      --> for removing case sensitivity and searching

grep -i -n 'anything' 'filename'   --> for searching with line number as well

grep -i -n 'anything' 'filename' * --> for searching word/char in all files in current directory

grep -i -n -v 'anything' 'filename' --> for searching other than matching word/char // same as not operator (-v )

Q. If you want to saarch from only first 5 lines of one file if there are 100s of lines of code 
-->
head -5 'filename' | grep 'anything' -i -n    
Note:- above  | called as pipe 

----------------------WORD COUNT ------------------------------------------------

wc 'filename'     --> will give output in [lines] [words] [bytes/chars] filename

wc -l 'filename'  --> to fetch only lines

wc -w 'filename'  --> to fetch only words

wc -m 'filename'  --> to fetch only chars/bytes


==========================EDITOR =============================================

#### VI EDITOR ######

vi 'filename'  --> will create new file in editor (in linux notepad calle as editor)

for editing inside file press 'i' mode ==> INSERT mode
click esc for coming out of insert mode

:wq              --> for save and quit
:w               --> for only save
:q               --> Quit (if no changes were made)
:q!              --> Quit without saving 


###### SED EDITOR ####################

SED stands for Stream Editor.

-It is primarily used for text processing (substitution, deletion, printing, and insertion).
-Allows performing operations on files without opening them.
-A highly versatile and powerful command in Linux.

SED Operations

<========== Substitution ========>

Note :- use -i command for saving the file otherwise will make changes temporarily

1. Replace the first occurrence of the keyword hello with welcome:

sed 's/hello/welcome/' 'filename'

2. Replace the second occurrence of the keyword hello with welcome:

sed 's/hello/welcome/2' 'filename'

4. Replace all occurrences of the keyword hello with welcome:

sed 's/hello/welcome/g' 'filename'

5. Substitute and save changes directly into the original file:

sed -i 's/ho11.0/welcome/g' 'filename'

6. for adding/concat some content in 2nd line .

sed -i '2s/$/ dont welcome you/' 'filename'

for replacing whole 2nd line with given content.

sed -i '2c\This is my new second line' 'filename'

Note :- 2s 2c called as substitute and change command

<============ Deletion =============>

1. Delete the 1st line of a file:

sed -i '1d' 'filename'

2. Delete the fourth line of a file:

sed -i '4d' 'filename'

3. Delete the last line of a file:

sed -i '$d' 'filename'

4. Delete the content from 2nd to 6th line

sed -i '2,6d' 'filename'

5. Delete all the content from file

sed -i '1,$d' 'filename'

<===================INSERTION AND PRINTING THE DATA =================>

1.print data from line 2 to 6th line

sed -n '2,6p' 'filename'

2. insert new line in 2nd line add data to it 

sed '2i\hello world2' a.txt

Note:- use \ backslash here for adding 

3. add data to last line .

sed -i '$a\last line finisher3' a.txt  //$a stands for last line append



**********************************************************************************************************
************************ USER MANAGEMENT *****************************************************************
**********************************************************************************************************

Chapter 1: User Management

Linux is a multi-user operating system where multiple users can access a single machine and perform multitasking simultaneously.

Key Notes
The default user in Amazon Linux VM is ec2-user, which has sudo privileges.

When a user account is created, a home directory for the user is also created.

Examples:

ec2-user => /home/ec2-user

alice => /home/alice


User Management Commands ===============>

1. Create a user
sudo useradd 'username'

2.Set or update a password for a user
sudo passwd 'username'

NOTE :--- for switching use ---> su 'username'
          for ls it will show permission denied so use command "cd ~ "  bcoz it will be in root user directory 
          try cd home/ec2-user   // use in other non root user it will show permission denied 

3.Display all users
cat /etc/passwd
Note :- /etc/passwd: This is the file that stores user account information on a Linux system.

best way which i think is ==>
use commands :-  cd ~  --> cd ..  --> ls
Note :- (will open home directory)  here u will see list of users 

4.for searching particular user
grep 'username' /etc/passwd

5.Switch to a different user account
su 'username'

after switching pwd will show admin dir and we dont have permission for ls out there 
so change the directory by using command:-
cd ~  OR  cd /home/username

Note : exit command for logout of user and return to admin user i.e ec2-user

6. delete user

sudo userdel 'username'   //it deletes only username but not directory home/username

7. del user with their working directory

sudo userdel 'username' --remove

8. change/update the existing password for user.

sudo passwd 'username'    //same as 2nd command

9. To return to root user ec2-user .

exit 

OR 

before only set password for it :- sudo passwd ec2-user


Chapter 2: Working with User Groups ===================>

NOTE:-
When a user is created, a corresponding group is automatically created with the same name. User groups help manage permissions efficiently.

Commands for Group Management

1.Display all groups
cat /etc/group  
Note :- there are already built in users in group and u will see permissions out there :- x:1000  //ec2-user:x:1000:         → group 'ec2-user' with GID 1000

2.Create a group
sudo groupadd developers

3 Delete a group**  
  sudo groupdel <group-name>  

4 Rename a group**  
  sudo groupmod -n <new-group-name> <old-group-name> 

5.Add a user to a group
sudo usermod -aG groupname username

where,
usermod	Command used to modify user accounts (like adding to groups, changing home directories, etc.)
-a	Append — this option tells usermod to add the user to the group rather than replacing their existing group memberships
-G	Specifies that the next argument is a list of groups the user will be added to

6. to see no of users in that group 
getent group <group-name>  //get entries

OR 

sudo lid -g 'groupname'

where ,
lid	List ID command — shows group or user membership
-g	Tells lid to operate in group mode
'groupname'	The name of the group you're querying

7. remove user from group . 
  sudo gpasswd -d <username> <group-name>  

EXPLANATION WITH EXAMPLE :-
- consider one a.txt file owner and group only have the permission to open the file and others dont have so by adding user into group it will be easy

- in home directory root user ec2-user cannot able to access other users directory i.e "pvk1" user so i changed permission like given read write execute permission to group and added
   ec2-user into that group so that he is now able to enter 
--see image uploaded outside

///////////////////////////////////////////////////////////////////
how to login without using key pair ???
////////////////////////////////////////////////////////////////////


1. Modify the following files:

   * sudoers
   * sshd_config

2. **Sudoers File**  see lec 8

What is the sudoers file in Linux?
The sudoers file is a critical configuration file that controls which users can run commands as a superuser (root).

   * a) Open the file:
     `sudo visudo`

   *b) Add the following line below :  // given the permission of sudo users 
      Allow root to run any commands anywhere
      root    ALL=(ALL)       ALL
      
      `uname ALL=(ALL:ALL) ALL`  //add this //add extra users below this now...

   *c) Save and exit: CTRL + X + Y + Enter

By default, password authentication is disabled in Linux virtual machines (VMs) for security reasons. To enable it: follow below step

3. **Enable Password Authentication**
   Right? Yes or no?

   * Open the sshd\_config file:
     `sudo vi /etc/ssh/sshd_config`
   * Change the value of PasswordAuthentication to yes.
 Note :- after entering command use command "i" for coverting command mode to insert mode and then write yes
         after click esc and write :wq for saving and exiting

   * Restart the SSH service:
     `sudo systemctl restart sshd`

4. **Connect to the VM**
   Use the following command to connect:
   `ssh alice@<public-ip>`

public ip you will get from ec2 instance ipv4 address

***for seeing the user groups :--------------->

Command: id ec2-user

Output:

1000(ec2-user): The primary group for the user.

4(adm): The adm group allows access to administrative logs, such as /var/log/syslog or /var/log/messages.

10(wheel): The wheel group typically grants administrative privileges, such as the ability to use sudo.

190(systemd-journal): This group allows access to systemd's journal logs, e.g., using journalctl.

Log Locations:

Debian-based systems (Ubuntu): Use /var/log/syslog.

Red Hat-based systems (CentOS, RHEL, Amazon Linux): Use /var/log/messages

==================================================================================================================================================================
==================================================================================================================================================================
####################################################################################################################
File Permissions in Linux

File permissions will give restricted access to the users
####################################################################################################################

Types of Permissions - 
Linux has three basic types of permissions:

r → Read (View file contents)
w → Write (Modify or delete file contents)
x → Execute (Run as a program or script)

Understanding File/Directory Permissions - 

Permissions are represented using 9 characters, as shown below:
rwxrwxrwx f1.txt

Each section of the permission string corresponds to different user categories:
1. First 3 characters → Owner/User permissions
2. Middle 3 characters → Group permissions
3. Last 3 characters → Others (everyone else) permissions

Examples:
r--r-xr--  f2.txt
User (Owner): Read (r--)
Group: Read + Execute (r-x)
Others: Read (r--)

r-xrw--w-  f3.txt
User (Owner): Read + Execute (r-x)
Group: Read + Write (rw-)
Others: Write (--w)

Changing File/Directory Permissions Using chmod
The chmod command allows you to modify file permissions:

+ → Add permission
- → Remove permission

Examples:

# Give execute permission to the user
chmod u+x f1.txt

# Give write permission to the group
chmod g+w f1.txt

# Remove execute permission from others
chmod o-x f1.txt

# Remove all permissions from others
chmod o-rwx f1.txt

# Grant all permissions to the group
chmod g+rwx f1.txt
File Permissions in Numeric Format
Permissions can also be represented using numbers (0–7), where:

Number	Permissions
0	No permissions
1	Execute only
2	Write only
3	Write + Execute
4	Read only
5	Read + Execute
6	Read + Write
7	Read + Write + Execute
Examples:

# Give execute permission to all (ugo+x)
chmod 111 f1.txt

# Give write permission to all (ugo+w)
chmod 222 f1.txt

# User: rwx, Group: rw, Others: rx
chmod 765 f1.txt

# User: r, Group: rx, Others: rw
chmod 456 f1.txt

# Give full permissions to everyone
chmod 777 f1.txt

# Remove all permissions from User & Group, but allow Others full access
chmod 007 f1.txt

Summary
Permissions (r, w, x) define access control for files and directories.
They apply to three user categories: Owner, Group, Others.
Use chmod to modify permissions either in symbolic (u+x, g-w, etc.) or numeric (755, 644, etc.) format.
Numeric permissions use a combination of values (0–7) to set access levels efficiently.

############################################################################################
chown Command in Linux
The chown command is used to change the ownership of files and directories in Linux. It allows modifying both the owner and the group associated with a file or directory.
#############################################################################################

1️⃣ Basic Syntax

sudo chown [new-owner] [file/directory]
or
sudo chown [new-owner]:[new-group] [file/directory]

2️⃣ Changing File/Directory Ownership
1. Change the Owner of a File
sudo chown user1 file.txt
✅ Effect: file.txt will now belong to user1.

2. Change Only the Group
sudo chown :group1 file.txt
✅ Effect: The group of file.txt is now group1, but the owner remains unchanged.

3. Change Both Owner and Group
sudo chown user1:group1 file.txt
✅ Effect: file.txt now belongs to user1 and group1.

####################################################################################################
Finding Files in Linux
In Linux, the find command is used to search for files and directories based on different criteria such as name, type, size, and modification time.
#####################################################################################################

1️⃣ Basic Syntax

find [directory] [options] [search criteria]
[directory] → The location where you want to search (e.g., /home, /var, etc.).
[options] → Filters such as file name, type, size, date, etc.
[search criteria] → The specific property you are searching for.

2️⃣ Common Use Cases
1. Find a File by Name

sudo find 'path' -name 'file name' 

eg:- 
sudo find /home -name "f1.txt"
✅ Effect: Searches for f1.txt inside the /home directory.

2. Find Empty Files
sudo find /home -type f -empty
✅ Effect: Lists all empty files (-type f) inside /home.

3. Find Empty Directories
sudo find /home -type d -empty
✅ Effect: Lists all empty directories (-type d) inside /home.

3️⃣ Finding Files Based on Modification Time
The -mtime option searches for files based on modification time.

4. Find Files Modified 30 Days Ago
sudo find /home -mtime 30 -print
✅ Effect: Displays files inside /home that were last modified 30 days ago.

5. Find Files Modified 1 Day Ago
sudo find /home -mtime 1 -print
✅ Effect: Displays files inside /home that were modified 1 day ago.

6. Delete Files Older Than 30 Days
sudo find /home -mtime +30 -delete
✅ Effect: Deletes files inside /home that haven’t been modified in the last 30 days.

###################################################
Working with ZIP Files in Linux
The zip command in Linux is used to compress files and directories into a .zip archive, while the unzip command is used to extract them.
###################################################

1️⃣ Creating a ZIP File
Syntax:
zip [zip-new file-name] [files/directories]

Example: Compressing Multiple Files

# Create empty text files
touch file1.txt file2.txt file3.txt

# Create a ZIP archive containing all `.txt` files   =========================
zip my_archive.zip *.txt
✅ Effect: Compresses all .txt files into my_archive.zip.

2️⃣ Extracting a ZIP File   ==================================================
Syntax:
unzip [zip-file-name]

Example: Unzipping a File
unzip my_archive.zip
✅ Effect: Extracts my_archive.zip into the current directory.

3️⃣ Additional ZIP Options ===================================================

1. Create a ZIP Archive of a Directory
zip -r "folder.zip" "old_folder"
✅ Effect: Compresses old_folder and all its contents recursively into folder.zip 

2. List Contents of a ZIP File   ++++++++++++++++++++++++++++++++++++++++++
unzip -l my_archive.zip
✅ Effect: Displays a list of files inside my_archive.zip.

3. Extract ZIP to a Specific Directory
unzip my_archive.zip -d /path/to/destination
✅ Effect: Extracts files to /path/to/destination.

4. Delete Files from a ZIP Archive (Without Extracting)
zip -d my_archive.zip file2.txt
✅ Effect: Removes file2.txt from my_archive.zip.

5. Password-Protect a ZIP File
zip -e secure_data.zip secret_file.txt
✅ Effect: Compresses secret_file.txt into secure_data.zip with password protection.

4️⃣ Summary
zip [zip-file.zip] [files] → Compress files into a ZIP archive.
unzip [zip-file.zip] → Extracts a ZIP file.
zip -r [zip-file.zip] [directory] → Compresses a directory recursively.
unzip -l [zip-file.zip] → Lists the contents of a ZIP file.

################################################
Networking Commands
#################################################

1) ping : To check connectivityping url/ip address  
eg :- ping www.google.com // it will run constantly so press ctrl+c  to stop it

ping -c 5 google.com // will run 5 times of count


2) wget : Used to download files from the internet wget <url>
eg :- 
https://www.python.org/ftp/python/3.13.3/python-3.13.3-amd64.exe  //copy link address from online wherever you see link is for downloading something and paste it in terminal
==>
wget https://www.python.org/ftp/python/3.13.3/python-3.13.3-amd64.exe


3) curl : Used to send HTTP requests to a server curl https://zenquotes.io/api/random
          To get the response in JSON format 

curl  https://restcountries.com/v3.1/name/deutschland  //without pretty

curl  https://restcountries.com/v3.1/name/deutschland | jq   // for response in pretty format

4) ifconfig : To get the IP address of the machine ifconfig

######################################################################
Package Managers in Linux  || INSTALLATION/UNINSTALL OF ANY SOFTWARES
######################################################################

Package: A package is a software application or tool.Examples: git, maven, java, python, etc.

Package Managers are used to install, update, and manage software packages on Linux machines.They are specific to the Linux distribution:

Amazon Linux / Red Hat Linux / CentOS: yum

Ubuntu / Debian: apt

Common Commands:

** Check if Git client is installed:git --version

** Install Git client software: sudo yum install git (For Ubuntu/Debian: sudo apt install git)

** Check Git installation path:whereis git

1) Install git :- 
sudo yum install git 

sudo yum install git -y //for avoiding confirmation message 

2) To Unstall git:
sudo yum remove git -y

3) To Uninstall Maven:
sudo yum remove maven -y

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Steps to Set Up an HTTPD Webserver

1. Install the HTTPD Webserver:
   sudo yum install httpd -y

2. Check the Status of the Webserver:
   sudo service httpd status

3. Start the HTTPD Webserver:
   sudo service httpd start

Note
The httpd webserver runs on the HTTP protocol, which uses port number 80.

Enable HTTP Protocol in EC2 VM Security Group
To access the webserver, ensure that the HTTP protocol is enabled in the EC2 security group inbound traffic on port 80.

////////////////////////////////////////////////////////////////

START STOP RELOAD RESTART SERVICES ONCE INSTALLED LIKE TOMCAT, GLASSFISH ,HTTPD SERVERS ....

/////////////////////////////////////////////////////////////////

See the image uploaded in github ??????????

Here is the extracted text from the image:

---

**What is systemctl in Linux?**

`systemctl` is a command-line utility used to manage and control system services on Linux systems that use the `systemd` initialization system. It is one of the primary tools for administering services, enabling you to start, stop, restart, enable, disable, and check the status of services.

`systemctl` plays a critical role in managing processes and services during the boot process and while the system is running. It interacts with the `systemd` daemon, which is responsible for handling service dependencies, monitoring services, and ensuring system stability.

**Key Features of systemctl**

Steps to Set Up an HTTPD Webserver

Install the HTTPD Webserver:
sudo yum install httpd -y

Check the Status of the Webserver:
sudo service httpd status

Start the HTTPD Webserver:
sudo service httpd start

stop the server :- 
sudo systemctl stop httpd

Note
The httpd webserver runs on the HTTP protocol, which uses port number 80.

Enable HTTP Protocol in EC2 VM Security Group
To access the webserver, ensure that the HTTP protocol is enabled in the EC2 security group inbound traffic on port 80.

????????????????????????????????????????????????????????????????????????????????????????
============== HARD LINK & SOFT LINK ===================================================
????????????????????????????????????????????????????????????????????????????????????/???

🔹 Hard Link :- 

-A hard link is another name for the same file data.
-Both the original and the hard link point to the same data.
-If the original is deleted, the hard link still works.
for eg :- if a.txt is deleted then also we can access it by b.txt (backup file) 

Note:- inode numbers is unique number for backup area 

steps :- 

i) create a original file .
--> 
touch a.txt

ii)create a hard link .
-->
ln a.txt b.txt   // if b.txt is not created then it will create automatically and link the file 
                 // b will have same content as a.txt 

++for taking backup of one file in one destination to another destination.
-->
ln "path1" "path2"                    // dont forget to use quotes ""

++++++++++++++ for folder to folder hardlink .
==>
cp -al "/Users/prajwal/Documents/devops" "/Users/prajwal/Documents/backup_devops"          //will create devops folder in backup_devops

where,
cp: standard copy command
-a: archive mode (preserves permissions, timestamps, symlinks, etc.)
-l: create hard links instead of copying file data

iii) To confirm check the inode numbers 
-->
ls -li 

iv) remove the original file and see the backup file content 
-->
rm -rf a.txt 
cat b.txt (backup file --> same inode number and same content of original file will be present here...)

CONS of hardlink ==>

❗Why "hardlink" It’s NOT a Real Backup:
--->

-Both files point to the same data.
-Changing one changes the other.
-Deleting one is okay — the other still works — but if the data gets corrupted, both are affected.

🔸 cp → Real Backup
-Makes a separate copy of the file.
-Safe from changes or deletion.
✅ Use this for backup.

🔹 Soft Link (Symbolic Link)
-A soft link is like a shortcut to another file.
-It can link across different file systems.
-If the original file is deleted, the soft link is broken (becomes a dead link).

/home/ec2-user  <== consider this is our desktop directory 


🔗 Steps to Create a Soft Link
1. Create a file
-->
echo "Hello Linux" > original.txt

2. Create a soft link
-->
ln -s original.txt softlink.txt

3. Check the link
-->
ls -l
You’ll see something like:

softlink.txt -> original.txt
4. Use the soft link
-->
cat softlink.txt
# Output: Hello Linux

5. Delete the original
-->
rm original.txt
cat softlink.txt
# Error: No such file or directory
📌 Now the soft link is broken, because it pointed to the original.


//////////////////////////////////////////////////////////////////////////////////////////////
 WINDOWS COMMANDS 
//////////////////////////////////////////////////////////////////////////////////////////////

| Linux Command    | Windows (cmd) Equivalent | Windows (PowerShell) Equivalent |
| ---------------- | ------------------------ | ------------------------------- |
| `ls`             | `dir`                    | `ls` (alias of `Get-ChildItem`) |
| `pwd`            | `cd`                     | `pwd`                           |
| `cd / cd ..`     | `cd / cd ..`             | same                            |
| `clear`          | `cls`                    | `cls`                           |
| `cat file.txt`   | `type file.txt`          | `Get-Content file.txt`          |
| `cp file1 file2` | `copy file1 file2`       | `Copy-Item file1 file2`         |
| `mv file1 file2` | `move file1 file2`       | `Move-Item file1 file2`         |
| `rm file.txt`    | `del file.txt`           | `Remove-Item file.txt`          |
| `rmdir folder`   | `rmdir folder`           | `Remove-Item folder -Recurse`   |
| `touch file.txt` | `type nul > file.txt`    | `New-Item file.txt`             |
| `man`            | no direct (use `help`)   | `Get-Help`                      |
| `whoami`         | `whoami`                 | `whoami`                        |
| `ifconfig`       | `ipconfig`               | `ipconfig`                      |























