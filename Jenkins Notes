Imp Notes:-  30:33/////    USIng DockerProject1 <======github repo

i) stages ----> stage() --> steps{} --> stage() --> steps{} --> ...

ii)
sudo apt update
sudo apt install fontconfig openjdk-17-jre
java -version

apt or yum are package managers where yum is used for amazon linux server and for ubuntu apt is used fixed.

iii)
pipeline uses groovy language

iv) why we can install jdk/jre directly but not jenkins?
OpenJDK is available in the default Ubuntu repositories/server whereas jenkins is not available in default ubuntu repo.

That means sudo apt install jenkins won’t work unless you first add Jenkins’s official repository.
We use wget to download Jenkins’s GPG key and add its repository:
cmd  :-  wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo tee ...

v) 
Note :- while writing a script u will see at bottom "pipeline syntax"  click that so u will get proper syntax u want so copy paste this 
eg:-    pipeline syntax --> sample step --> git --> add github details --> will create github syntax

vi)
8080==> jenkins
8090 ==> java

vi) 
how to run pipeline every single minute?
-->
Dashboard --> trigger --> build periodically --> add * * * * *

How to run pipelinee every single minute to check any commit happens in main or not ; if yes then will run a pipeline otherwise not but it will keep checking every minute
-->
Dashboard --> trigger --> scm poll --> add * * * * *

vii) 
docker ps                  ==> to see running container 
docker ps -a               ==> To see stopped container
docker rmi <image>         ==> To remove particular image
docker rm <container_name> ==> To remove particular container 
docker container prune     ==> To remove all stopped container

viii) What is kubernetes ?
--> 
it is addon to dockers
will manage docker containers like start ,stop, loadbalancing 

ix) can send email noti while build/pipeline success or failedd

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#################################
Build and deployment process
##################################

1. git clone
2. mvn clean package / maven clean test build  [ for creating jar file]
3. create/build docker image
4. run docker image inside a container
----------------------------------


The above steps where performed by us manually in our docker classes. Question is how can we automate these tasks. Can we do these steps manually to deploy our application in different environments like dev, QA, staging, UAT, production etc?

#############
Jenkins CI/CD
#############

-> Jenkins is a popular open-source automation server used for Continuous Integration (CI) and Continuous Deployment (CD) in software development. It helps automate the building, testing, and deployment of applications.

-> Automation – Jenkins automates repetitive tasks like code compilation, testing, and deployment

-> Plugins – It has 1,800+ plugins, integrating with Git, Docker, Kubernetes, Maven, and more

-> Pipeline as Code – Uses Jenkinsfile (written in Groovy) to define CI/CD pipelines.

Jenkins CI/CD Workflow:
____________________________

-> Developers push code to a repository (GitHub, GitLab, Bitbucket).
-> Jenkins pulls the latest code and triggers a build using maven.
-> Artifact is generated (e.g., JAR, Docker image).
-> Deployment – Jenkins deploys the application to a test/staging/production environment
-> We can create jenkins pipeline in 2 ways

		1) Declarative Pipeline
		2) Scripted Pipeline (groovy)

Jenkins Declarative Pipeline Explained

A Jenkins Declarative Pipeline is a structured way to define a CI/CD pipeline using Groovy-based syntax. Let's break down your pipeline step by step.

Pipeline Structure:

pipeline {  
    agent any  // Runs the pipeline on any available agent (Jenkins node)

    stages {  // Defines different stages of the pipeline
        stage('git clone') {  // Stage 1: Clone the repository
            steps {  
                // Logic for cloning a Git repository
            }
        }
        stage('mvn build') {  // Stage 2: Build the project using Maven
            steps {  
                // Logic for running Maven build
            }
        }
        stage('build image') {  // Stage 3: Build a Docker image
            steps {  
                // Logic for building a Docker image
            }
        }
    }
}
Explanation of Each Section
1. pipeline {}
This is the root block that defines the entire CI/CD pipeline.

2. agent any
Specifies that the pipeline can run on any available Jenkins node (agent)/server.

If you want to run it on a specific node, you can use:

groovy

agent { label 'my-node' }

3. stages {}
A stage represents a logical step in the pipeline.

Each stage contains steps {} where the actual actions are performed.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Jenkins Server Setup in Linux VM

$$ Step - 1 : Create Linux VM in AWS and configure security group for 8080 port

using ubuntu server not amazon linux this time so while choosing AMI select ubuntu...

Create Ubuntu VM using AWS EC2 (t2.medium, because jenkins require minimum 4gb RAM)

Note: Enable 8080 Port Number in Security Group Inbound Rules


$$ Step-2 : Install Java using below commands

sudo apt update
sudo apt install fontconfig openjdk-17-jre
java -version

Note:- we installing only jre bcoz jdk would have install other unnecessary things as well
       java is compulsory for jenkins to run bcoz jenkins is built using java only

$$ Step-3 : To Install Jenkins use the below commands

sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins

where ,
✅ 1. Download Jenkins GPG key:

sudo wget -O /usr/share/keyrings/jenkins-keyring.asc https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
➡️Downloads Jenkins's official security key and saves it in your system.
This key is used to verify the authenticity of Jenkins packages.

🔒 Why this is needed:
APT (Ubuntu's package manager) needs to trust the packages it installs. The GPG key acts like a digital signature that confirms:
"Yes, this Jenkins package really comes from the official Jenkins team and hasn't been tampered with."

By saving this key, you're telling your system:
"Packages from Jenkins’s website are safe to install."

✅ 2. Add Jenkins repository to APT sources:

echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null
➡️ Tells your system where to find Jenkins packages for installation.
🗂️ Adds Jenkins's repo to APT so apt install jenkins can work.

✅ 3. Update the package list:

sudo apt-get update
➡️ Refreshes APT so it recognizes the new Jenkins repo.

✅ 4. Install Jenkins:

sudo apt-get install jenkins
➡️ Installs Jenkins using the newly added repo.

// To see jenkins version =======================> jenkins --version

$$ Step-4 : Start Jenkins services using below commands

sudo systemctl enable jenkins
sudo systemctl start jenkins

$$ Step-5 : Verify Jenkins setup

sudo systemctl status jenkins

$$ Step-6 : Open jenkins server in browser using VM public ip of linux vm

http://public-ip:8080/

$$ Step-7 : Copy jenkins admin pwd

sudo cat /var/lib/jenkins/secrets/initialAdminPassword

$$ Step-8 : Create Admin Account & Install Required Plugins in Jenkins
____________________________________________________________________

--------------------------------------------------------------------------
--------------------------------------------------------------------------
My Notes :::====
--------------------------------------------------------------------------
--------------------------------------------------------------------------

** How to create a new pipeline/jobs ?
Now after 8th step you should click --> create a job/ new item  ---> enter name --> choose pipeline --> ok
after that script blank tab will be there click apply ---> save (will create a pipeline/job) 
click ---> dashboard --> u will see list of pipelines

** To write script and run/build first pipeline program hello world:- 
select one pipeline from dashboard --> click configure ==>pipeline --> write code  ==> right side drop down list---> select hello world --> apply and save --> build now ==> you will see first hello wolrd got builded using jenkins

Note :- inside definition there are 2 options :- pipeline script OR  pipeline script from SCM [ means it will pick up script from github directly ]

** To see output :- 
click on stages/below build u will see ---> console output

** To set poll/schedule task when to run jenkins pipeline:-   ( triggers -> poll scm)
select one pipeline from dashboard --> click configure --> triggers ==> click poll scm --> add now anything wanted

** How to download plugins ?
-->
Dashboard  ===> plugins ==> search and add any plugin u want

** how to see tools ?
Dashboard ==> tools

--------------------------------------------------------------------------
-------------------------------------------------------------------------
END OF LEC 1
--------------------------------------------------------------------------
--------------------------------------------------------------------------

///////////////////////////// 2nd LECTURE ////////////////////////////////////////

Note :- while writing a script u will see at bottom "pipeline syntax"  click that so u will get proper syntax u want so copy paste this 
eg:-    pipeline syntax --> sample step --> git --> add github details --> will create github syntax

First step for pipeline(git clone)  =====>

pipeline {
    agent any

    stages {
        stage('git clone') {
            steps {
                git branch: 'main', url: 'https://github.com/coderPVK2001/DockerProject1.git'
            }
        }
    }
}


Second Step for maven build / generate jar file ============>

configure the maven as jenkins dont know the location and version of maven:- 
dashboard ==> tools ==> maven ==> select version ==> give name as same version name so it will add that particular maven version 
name => 3.9.9

Note :- 
Don't forget to add and add name as given while configuring maven 
     tools {
        maven '3.9.9'  
    }


pipeline {
    agent any
    
     tools {
        maven '3.9.9'  
    }

    stages {
        stage('git clone') {
            steps {
                git branch: 'main', url: 'https://github.com/coderPVK2001/DockerProject1.git'
            }
        }
        stage('Maven Build') {
            steps {
                sh 'mvn clean test package'
            }
        }
    }
}

Third step for building docker image 
Note:- after installing if not works then restart linux server in gitbash
See image created or not after successful build in jenkins ?
--> docker images <== type command in ubuntu and see

We can download plugin of docker in jenkins as well but we are installing docker in linux server/ubuntu bcoz if we use ansible later so it will be easy to configure .
install commands:- 
curl -fsSL get.docker.com | /bin/bash
sudo usermod -aG docker jenkins
sudo usermod -aG docker ubuntu
sudo systemctl restart jenkins
sudo docker version

pipeline {
    agent any
    
     tools {
        maven '3.9.9'  
    }

    stages {
        stage('git clone') {
            steps {
                git branch: 'main', url: 'https://github.com/coderPVK2001/DockerProject1.git'
            }
        }
        stage('Maven Build') {
            steps {
                sh 'mvn clean test package'
            }
        }
        stage('Docker Build image') {
            steps{
                sh 'docker build -t pvk1036/demo1 .'
            }
        }
    }
}


Fourth step to Run/Deploy the image 


pipeline {
    agent any
    
     tools {
        maven '3.9.9'  
    }

    stages {
        stage('git clone') {
            steps {
                git branch: 'main', url: 'https://github.com/coderPVK2001/DockerProject1.git'
            }
        }
        stage('Maven Build') {
            steps {
                sh 'mvn clean test package'
            }
        }
        stage('Docker Build image') {
            steps{
                sh 'docker build -t pvk1036/demo1 .'
            }
        }
         stage('deployment'){
            steps{
                sh 'docker run -d -p 8090:8090 --name cont1 pvk1036/demo1'
            }
        }
    }
}

Note :
--name will give name to the container

**you will get below error if you try to run pipeline multiple times bcoz of container name
docker: Error response from daemon: Conflict. The container name "/cont1" is already in use by container 

So to tackle this stop and remove the container first

eg:- 

pipeline {
    agent any
    
     tools {
        maven '3.9.9'  
    }

    stages {
        stage('git clone') {
            steps {
                git branch: 'main', url: 'https://github.com/coderPVK2001/DockerProject1.git'
            }
        }
        stage('Maven Build') {
            steps {
                sh 'mvn clean test package'
            }
        }
        stage('Docker Build image') {
            steps{
                sh 'docker build -t pvk1036/demo1 .'
            }
        }
        stage('deployment'){
            steps{
                sh 'docker stop cont1'
                sh 'docker rm cont1'
                sh 'docker run -d -p 8090:8090 --name cont1 pvk1036/demo1'
            }
        }
    }
}


=========================================================================================================================================
====================END OF LEC 2 ========================================================================================================
=========================================================================================================================================











