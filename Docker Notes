16:40 pe adka

Docker notes


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
IMP NOTES:- 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

1) Ssh clients :- git bash ,putty, mobaxterm
   Authentication is required for ssh client like key pair file And connect to linux server

2)
Docker ps :- list of running containers
Docker ps -a :- list of containers which got executed and stopped now

3) 
If you run Multiple Containers in same linux vm then host port number should be different for every container

4)
one image multiple containers are created but from one container only one image will be there inside it

5)
Docker engine already has n no of containers so we are using that one container only when docker run is used 
Docker run is not creating a new container instead docker engine provides existing container. Which helps to run the docker image

6) 
*****Ansible :- we are configuring / installing / managing docker manually in every server so if if there are 100 of server then we don't need manually ;make use of ansible

7) 
In Inbound rules we are defining the ports which will HOST VM(linux, redhat)  will accept 
Note :- host Vm Is entry point .
** MULTIPLE HOST PORTS CAN BE MAPPED TO ONE CONTAINER PORT

8) 
detach mode
Without -d means application is running in foreground eg.if we close gitbash app/container will stop running.
But with -d container will be running in the background.
eg:- 
run a springboot application but after clicking ctrl+c/exit from git bash app/container will stop running and we will be not able to access springboot application

9) 
Docker file name should start with capital letter only in any project 
eg :- Dockerfile

Docker file should be added in root folder of any project

10) 
Multiple docker builds can be created but with diff tagname; in short multiple images can also be created for same dockerfile

11) 
TO run executable jar file:--->
java -jar filename.jar

12) 
CMD  <---> ENTRYPOINT
COPY <---> ADD

13) 
root file in java contains pom.xml,source,...

14) 
we dont copy jar files directly to github repo as github is used to copy the source code of project and not binaries/jar

15) 
Naming convention of docker image  :- "username/repository-name"  


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



-  Suppose u built app on windows server and try to deploy on linux server there will be compatibility and portability issue if not configured properly
-  Docker is run in Linux server instead of local system bcoz it takes more storage
-  So ,if we create docker file and run it anywhere it will 100% run as there will be not compatiblity and portability issue
-  Multiple servers are there in production so we can't change environment for each and every server like eg. Java 18 in one env and Java 21 in one env. 
   So docker comes here and these docker files will help to change in multiple servers so don't need to worry about anything

25: architecture Linux vm --> ec2 instance amazon

29. : Kernel acts as bridge between linux  and hardware/software ...
        Eg. If we type something on keyboard it goes to kernel first and then it will send to linux.
        Kernel helps to manage hardware,software...

34:- gives diagram to explain
- ec2 is created with linux  
- linux OS --> docker engine --> docker container (isolated environment)
-Docker engine acts as bridge here now between linux and docker container.
 on top of this docker container have been created and required software are installed.
 â€¢ Docker container/ ONE ISOLATED DOCKER CONTAINER has required environments setup like java mysql and appcode so it will get run by linux OS
â€¢ Linux OS helps to run these container 
â€¢ now same container can be run in diff server or ec2 instance so no compatibility issue will be there


Docker file/container contains
Appcode --> jar file of java project
+ Download Dependencies (same like pom.xml)

In spring boot project docker file created in root folder


44 pe diagram dekh samjh jayega 
Docker file ---> {build} ---> docker image (contains replica of what included in file)
---> {store the image into} --->  docker hub (list of images stored here) ---> 
{Pull the image from hub} ---> after pulling container will be created in linux server.

Pros of docker:- 
â€¢ Portability = once u create a container in which softwares like java 8,mysql installed ,it will now run into any OS .
â€¢ installation = helps to install / upgrade any software in multiple no. Of servers.

PSA NOTES /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Docker
_____________

-> Resolves Compatibility problem using containerization
-> Docker will help us to install our software on different server without worrying about compatibility issue
-> To deploy same application on multiple servers for load balancing we need not manually install technology stack (like Angular 18v, java 17V etc) manually one by one if docker is not used
-> Software upgrades can be done easily on multiple machines using docker

Note:
âœ” Docker Engine acts as a bridge between the container and the host OS
âœ” Containers donâ€™t have their own kernel, they use the hostâ€™s kernel
âœ” Docker Engine manages containers but does not create themâ€”it runs & controls them



Note:

Linux VM--->Install Docker Engine--->Docker Engine acts as bridge between Linux Kernel and docker Container-->Provides isolated enviroment to run Docker Image.

####################
#
# docker container			
####################
#
# dOCKER ENGINE
####################
#
#  lINUX vm
####################

Docker Architecture:
________________________________________________________________________
Docker File: Here we will provide Intructions to create docker image
Docker Image: Application Package with dependencies of it
Docker Registry: Its a hub to store docker images
Docker Container: Isolated environment to run docker image

What is containerization?

containers package an application along with its dependencies (libraries, configuration files, etc.), ensuring that it runs consistently across different computing environments.

#########################          #########################                  ####################                 @@@@@@@@@@@@@@@@@
Dockerfile														%%%%%%%%
															Container1
(Contains instructions     ------>    Docker Image               ------------>  Docker hub/registry   ---------->       %%%%%%%%%
 to download dependencies   (build)	    (Application Code +   (Store)      (Collection of images)			Container2	
				      Dependencies to run that)								%%%%%%%%%%
)
##########################	   ##########################                 #####################                 @@@@@@@@@@@@@@@@@

															Linux Server




=============================================================================================================================================
2nd Lecture :-  (add some remaining notes from keep notes also)
==============================================================================================================================================

PSA NOTES --->

Installing Docker:
_________________________

For Amazon Linux use the following commands

Install Docker In Amazon Linux VM
____________________________
sudo yum update -y 
sudo yum install docker -y
sudo service docker start
sudo usermod -aG docker ec2-user
exit

REASON :- 

sudo yum update -y
ðŸ‘‰ Updates your system to the latest versions.
Why: So Docker installs smoothly.

sudo yum install docker -y
ðŸ‘‰ Installs Docker on your Linux VM.
Why: This is the actual Docker software.

sudo service docker start
ðŸ‘‰ Starts Docker service.
Why:
= Starts the Docker daemon (background service).
= Docker wonâ€™t work unless the service is running.
= You can check with: sudo service docker status.

sudo usermod -aG docker ec2-user
ðŸ‘‰ Gives your user permission to run Docker without sudo.
Why: Convenience â€” no need to type sudo docker every time.

exit
ðŸ‘‰ Logs out.
Why: Needed to apply the permission change above.
_____________________________________

For Ubuntu use the following commands

Install Docker In Ubuntu VM
sudo apt update
curl -fsSL get.docker.com | /bin/bash
sudo usermod -aG docker ubuntu 
exit
Verify docker installation

Use this command to check version of docker installed
_____________________________________________________
docker -v

##############################################################################################
##############################################################################################

For practise pull the sample image from docker hub repository of pankaj sir academy: docker pull psait/pankajsiracademy:latest

For Practise pull docker official image: docker pull hello-world

###############################################################################################
###############################################################################################


Important Docker Commands
_______________________________________________________


1) To download docker image from hub
   eg :- docker pull [image-name]
	
2) To Run docker image - this will create container (Isolated Enviroment to run docker image- This is not a OSs)
   eg :- docker run [image-name / image-id]

3) To display docker containers that are running 
   eg :- docker ps 
	
4) Display stopped containers:
   eg:- docker ps -a 
	
5) To Stop docker container 
   eg:- docker stop [container-id]
	
6) Start docker container 
   eg:- docker start [container-id]

7) To remove stopped docker container 
   eg :- docker rm [contianer-id]

8) To  Will Remove docker image 
   eg :- docker rmi [image-name / image-id]
	
9) To remove all stopped containers and un-used docker images we can use below command 
   eg:- docker system prune -a

_______________________________________________________________________________________________________________________

2nd lec MY  notes//////////////////////////////////////////////////////////////////////////////////////////////////

16 aws --> ssh client to aws connectivity with key value pair

Kv file will be created for local system  which should be kept safely.

23 :- docker installation in linux vm 
         Docker --v  // to check version

25 :- docker hub mein account create karoi
Docker hub contains public/private images 

27:00   docker image hello world

29:22 :- all commands docker pull,run , container

Docker ps :- list of running containers
Docker ps -a :- list of containers which got executed and stopped now

Docker run image/imageid

38:40 :---- pankaj sir image with all java ,mysql code into it spring boot project

Note :- one image multiple containers are created but from one container only one image will be there inside it
- docker engine already has n no of containers so we are using that one container only when docker run is used 

30 docker command s

Docker run is not creating a new container instead docker engine provides existing container. Which helps to run the docker image

48 :-----

Docker start stop 
Docker ps will give status of container with container id and state

Note :-. Ps will give only running container only

*****Ansible :- we are configuring / installing / managing docker manually in every server so if if there are 100 of server then we don't need manually ;make use of ansible

50: ---- remove image ,container,...



=============================================================================================================================================
3rd Lecture :-   (How to create Docker Image and run that to access from browser?)
==============================================================================================================================================

PSA NOTES -->


STEPS :::--->
1) Run Docker Image from docker hub using the command
   eg:- Docker run [image-name] - This command when executed we will not be able to access our container in browser because it requires port mapping.

2) As Container is running inside linux VM. We will have to map linux vm (host port) to container(Container port) this is called as port mapping. To do this perform the following
   Docker run -p host-port:container-port [image-name]
   Example: docker run -p 9090:9090 [image-name]
   Example: docker run -d -p 9090:9090 [image-name]     // will run the container in background

3) Now you can access our application using the url :-  http://public-ip:host-post(linux-vm)    //public ip is public IPV4 address 

Note
1. Enable Inbound rule in security group custom ip IPv4 anywhere with host port number.
   ec2 instance ---> security --> click on security group --> edit inbound rules --> select type [custom tcp] => add port no => source [anywhere IPV4] =>ADDD
2. If you run Multiple Containers in same linux vm then host port number should be different for every container
____________________________________________________________________________________

Install jekins using:-
eg :- docker image name - docker run -d -p 8080:8080 jenkins/jenkins
Note Enable Inbound rule in security group custom ip 8080 IPv4 anywhere

_______________________________________________________________________________________


_____________________________________________________________________________________________________________________

Note Docker will simply our journey to get required softwares in server through single line - 

Example download Sonarqube using docker image. If not use linux command to do the same.
eg :- docker run -d --name sonarqube -p 9000:9000 -p 9092:9092 sonarqube:lts-community


Example download nexus using docker image, If not use linux command to do the same.
eg : -docker run -d -p 8081:8081 --name nexus sonatype/nexus3

MYNOTES /////////////////////////////////////////////////////////

37 :- best explanation of how jar files running

(14 diagram):- Linux vm is host 
So for reaching the docker container we need to pass through linux vm first.
So container Port number and application port number should be same.

17:-- port mapping

First connect to host port and then it will internally take you to container port

Http://ip-addresss:host port no
Eg:-
Http://127.78.90:8089 //it will connect to linux vm/host

Port forwarding :- once u connect to host port it will take/connect you to CONTAINER
Port number which is PF

22:- port mapping , forwarding best explanation with figure along with security group of aws .
Inbound rules we are defining ports which will host vm will accept 
Note :- host Vm Is entry point .
In command "-p" stands for Port mapping/forwarding 
** MULTIPLE HOST PORTS CAN BE MAPPED TO ONE CONTAINER PORT

26:--- see configuration for security group where port is being added 

33:---  detach mode
Without -d means application is running in foreground eg.if we close gitbash app/container will stop running.
But with -d container will be running in the background.

37 :-- Jenkins ...


=============================================================================================================================================
4th Lecture :-  (How to create docker file? Create Docker Image? push that to docker hub?)
==============================================================================================================================================

PSA NOTES 
__________________________________________________________________________

In order to build a docker file as a developer you should know when to use the following keywords.Dockerfile instructions (FROM, CMD, ADD, etc.) are case-sensitive and must be written in uppercase.

1. FROM
___________
->The FROM instruction in a Dockerfile specifies the base image for your container or it will be used to specify what softwares should be downloaded to run our app. It is always the first instruction in a Dockerfile because it defines the environment where your application will run

FROM <image>:<tag>

<image> â†’ Name of the base image (e.g., ubuntu, node, python)
<tag> â†’ (Optional) Specifies the image version

Example:

FROM python:3.9 
FROM openjdk:17
FROM tomcat:9.0

2. MAINTAINER 
______________
-> The MAINTAINER instruction was used in older Docker versions to specify the author of the Dockerfile.
Example of old version - MAINTAINER Your Name <your-email@example.com> (This is deprecated)

Example for new version - LABEL maintainer="Your Name <your-email@example.com>"

3. RUN
__________
-> The RUN instruction in a Dockerfile is used to execute commands during the image build process. 

Example :

RUN 'git clone <repo-url>'

RUN 'mvn clean package'

Note: If you specify multiple RUN instructions in Dockerfile, then those will execute in sequential manner.

4. CMD
____________
-> The CMD instruction in a Dockerfile specifies the default command that runs when the container starts

CMD "java -jar myapp.jar"

Note: when we write multiple CMD instructions in dockerfile, docker will execute only last CMD instruction only.


Let us create our first docker file:
________________________________________

Step 1: vi dockerfile

FROM openjdk:17
MAINTAINER Pankaj
RUN echo 'run-1'
RUN echo 'run-2
CMD echo 'cmd-1'
CMD echo 'cmd-2'

Step 2: create docker image using the command
-> docker build -t pankajsiracademy/image1 .
   where,
   docker build               ==> This tells Docker to build a new image from a Dockerfile.
   -t pankajsiracademy/image1 ==> The -t flag tags the image with a name: pankajsiracademy/image1.
   we have used dot (.) in above command to mention that dockerfile in present in same working directory

//will create a local docker image 

OUTPUT :- 

eg :- 
 => CACHED [1/3] FROM docker.io/library/openjdk:17@sha256:528707081fdb9562eb819128a9f85ae7fe000e2fbaeaf9f87662e7b3f38cb7d8                                                                                                              0.0s
 => [2/3] RUN echo 'run-1'                                                                                                                                                                                                      0.3s
 => [3/3] RUN echo 'run-2'                                                                                                                                                                                                    0.4s
 => exporting to image                                                                                                                                                                                                                  0.1s
 => => exporting layers                                                                                                                                                                                                                 0.1s
 => => writing image sha256:9c2b4a524fd570b5a9e6aa097604b735f3a2f4a8befaa802a40b0eec0837129b                                                                                                                                            0.0s
 => => naming to docker.io/pvk/image1  

- during building or before image creation we can see all the RUN commands echo getting printed
- but for cmd to get printed we need to run the image/container

Step 3: To check image created use the command 
--> docker image

Step 4: to delete the image
--> docker rmi image-id

Step 5: You can again create the image
--> -> docker build -t pankajsiracademy/image1 .

Step 6: Run your docker image
--> docker run [image-id]
OUTPUT :- 
cmd-2

Note: 
1. Only last CMD instruction will run

eg2 :- docker run [image-id] echo 'hello world'
       you will notice now hello world will execute and not the last CMD of docker file

To over come the above said instruction we can use

5. ENTRYPOINT
________________
 -> Alternative command for CMD but the advantage is we cannot override this command

Example-1 :  CMD "java -jar app.jar"

Example-2 :  ENTRYPOINT ["java", "-jar", "app.jar"]

6. COPY
_________________

--> COPY instruction will copy the files from source to destination.
--> It is used to copy application code from host machine to container machine.
--> Here Source means "HOST Machine" and Destination means "Container machine"
--> as we are building local docker image which will be created in linum vm server know

Example : COPY target/your-app.jar  /usr/app/

- jar file gets created in target file which is under root directory of java/springboot project
- copy will create " /usr/app/ " path in docker container if it does not exist 

7. ADD
_________________

--> ADD instruction will copy the files from source to destination same as COPY, But in addition it can extract your compressed tar file 
--> Here Source can be host machine
--> ADD cannot download from HTTP/S3 URLsâ€”this is a misconception. (Be carefull in interviews)

Example:
ADD target/app.jar  /usr/app/

ADD <http-url>  /usr/app/ (Wrong)

8. WORKDIR
__________________

--> The WORKDIR instruction sets the working directory (Like cd command )
--> If the directory does not exist, Docker will automatically create it

Example: WORKDIR /path/to/directory

COPY target/your-app.jar   /usr/app/
WORKDIR /usr/app/
CMD "java -jar your-app.jar"

9. EXPOSE
_____________________

-> EXPOSE command is used to specify application is running on which PORT number. Using this you cannot change the port number of application. You are just mentioning that our application is running on the port number 9090.
-> If our application is running on port number 8081 you are mentioning expose 9090 then it is wrong. 
-> It is optional to use

Example : EXPOSE 9090



MYNOTES >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

From -- download required software images

Maintainer -- specify author of docker file

Run -- runs before image creation and during image build process

Cmd -- runs after image creation and when container starts
Mvn package --> gives jar file

Note ;- if you want to execute command before image creation use "run" and for after image creation use "cmd"

25: how to build image using docker file?

===> CMD command will run only last written words if we use cmd multiple times
for eg:- from "imagename":"tag"
         run echo "runn1"
         run echo "runn2"
         build "fdlfafasfda123132"
         cmd echo "hello1"
         cmd echo "hello1"
output :- runn1
          runn2
          hello1

=== see 51:20 FULL REPLAY for above commands =========

===========================================================================================================
===========================================================================================================
5th lecture [PRACTICAL] 
===========================================================================================================
===========================================================================================================

PSA NOTES  ??????????????


Now time for practicals guys, Let us do Dockerizing Spring boot application
___________________________________________________________________________

-> Spring Boot: framework which is used to develop enterprise based applications.
-> Spring Boot applications will be packaged as a jar file for deployment. 
-> To run the jar file we will use command :  java -jar <file-name.jar>
-> To run springboot application jar file we will use tomcat server as "embedded server".
-> By default spring boot application will run on port number 8080

Step 1: Create Docker File

FROM openjdk:17

COPY target/demo-app.jar  /usr/app/

WORKDIR /usr/app/

EXPOSE 8080

ENTRYPOINT ["java", "-jar", "demo-app.jar"]


Step 2: Note (Install maven and git in linux VM first)

1) Clone git repo in docker host machine (linux): git clone <http-url>

2) Point to project root folder: cd <app-name> and run to generate jar: mvn clean package

3) Create docker image and check that: 
-> docker build -t psait/pankajsiracademy:<tag> .
(
Here 
-> psait is username
-> repositoryname of docker hub
-> <tag> can
  a. prod-v1 or prod-v2v2 for production
  b. dev-v1 for development environment
  c. test-v1 for testing environment
  d. staging-v1 for staging environment
)
-> docker images 

4) run docker container: docker run -d -p 8080:8080 --name psa psait/your-app

5)See the image is running or not: docker ps

6) docker logs <container-id>

5) Access application URL in browser: http://public-ip:8080/


Steps to push docker image to docker hub
__________________________________________

-> login into docker hub account from bash

docker login
Enter username: psait
Enter password

-> push docker image
docker push psait/pankajsiracademy:<tag>


MYNOTES /////////////////////////////////////////////////

TravelPractise3 ==using for practise

using**
DockerProject1  ==> github repo name
DevProj         ==> intellij proj name
devops-app.jar.jar  ---> jar file name given


steps:- 
1. @getmapping in controller and return some message.

2. CREATE new docker file by right click --> new --> file --> Dockerfile

3. use <Finalname>PvkApp</Finalname> under <build>
   // with above command jar file name willl be given to the jar file otherwise it would have been empty name for jar file

4.Add commands in Docker file

FROM openjdk:17
COPY target/travel-app.jar  /usr/app/
WORKDIR /usr/app/
EXPOSE 8090
ENTRYPOINT ["java", "-jar", "travel-app.jar"]

5.create local git init and add that full project to github repository:- 
git init
git add .
git commit -m "first commit"
//above in local

//below is also same  //add all together
git branch -M main   //-M â†’ Forcefully rename the current branch (even if main already exists).
git remote add origin https://github.com/coderPVK2001/TravelDocker.git
git push -u origin main

6. see git,docker,maven versions in linux VM? are they available or not in linux VM ?
   if not available so install the above softwares using command :-
   sudo yum install git -y 
   sudo yum install maven -y 

Install Docker In Amazon Linux VM
____________________________
Install Docker In Amazon Linux VM
____________________________
sudo yum update -y 
sudo yum install docker -y
sudo service docker start
sudo usermod -aG docker ec2-user
exit

mvn -v
git -v
docker -v

7. After installing we need to clone our project in linux VM 
   git clone "url"

and see pwd also ==> /home/ec2-user 

8. Go to project folder until you see Dockerfile,pom.xml,src,...  as this is "root file"  
   go inside project folder

9. package our application / create a jar file of our application
   mvn clean package  //will create jar inside target folder

Note:- we dont copy jar files directly to github repo as github is used to copy the source code of project and not binaries/jar

10.  create docker repository .

root folder --> docker build -t pvk2001/demo1:testing .

syntax:- 
docker build -t "Reponame":<tag> .

where, 
-> psait is username
-> repositoryname of docker hub
-> <tag> can
  a. prod-v1 or prod-v2v2 for production
  b. dev-v1 for development environment
  c. test-v1 for testing environment
  d. staging-v1 for staging environment
)
-> will build docker image
Note :- dont forget to use "." as it points to current directory files

explanation :- will search for docker file in current directory

11. Run docker image  
docker run -d -p 8090:8090 pvk2001/demo1:testing

Note: docker run -p 8090:8090 pvk2001/demo1:testing  //first see application is working or not without using detach mode first


12 . Docker login 
add username and password

13. 
docker push pvk2001/demo1:testing

14. 


