

Installation steps :- 

1) Download AMD64 zip file will get downloaded 
https://developer.hashicorp.com/terraform/install#windows 

2) extract and add path in env variables

3) see terraform -version
-->
Terraform v1.13.4


IMP NOTES ++++

- after writing code/hcl type below commands:- 

*1) for installing packages written inside provider block and generates terraform.lock.hcl file which contains plugins details ->
Terraform init 

*2) for validating configurations /Checks the configuration files for syntax and logical errors. ->
Terraform validate

*3) for recorrecting format /indentations ->
Terraform fmt 

*4)Generating plan document  /Creates an execution plan to show what changes Terraform will make.  -->
 Terraform plan
//Which contains project details stored in form of json inside terraform.tfstate file

*5) saves plan document in tplan file so u can use this same in other projects/env. 
Terraform plan -out=tplan 

*6)Generates JSON structure and genrates resources in aws /Applies the planned changes to create/update resources. ->
Terraform apply 

*7) To destroy created resources.
Terraform destroy



##### What is Terraform ?

-> It is IAAC (Infrastructure As A Code)
-> We use HCL as language
-> Work with most of the Cloud platforms like AWS, GCP, Azure etc
-> Install Terrfaorm
-> Install VS Code

Why Terraform used? 
-->
Suppose we want to create infra for testing server so we will make replica of Dev server , after that same replica for UAT , preprod and Prod.
So by doing it manually we will use terraform where with only same script we can build full infra.
If we want to build new Project then also it will be useful for full setup of infra we can build it with help of these previous scripts.


HCL Syntax:

Blocks - 

blocks {

	key= value ( value can be string, number, boolean, list, map )


}

____________________________
Practical Example Script:
____________________________

provider "aws" {
	
	region = "ap-south-1"
	access_key = ""
	secret_key = ""
}

resource "aws_instance" "vm_1" {  //here vm_1 is logical name if in somewhere files we are using it then use vm_1 //simple terms it is variable name like in java
	
	ami = "ami-id"
	instance_type = "t2.micro"
	key_name = "devopssession"
	security_groups = ["default"]
	tags = {
		Name = "LinuxVM"                 //this is name of instance from which it will gets created
	}
}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
KEYWORDS IN TERRAFORM HCL LANGUAGE
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

1️⃣ provider → Defines which cloud (e.g., AWS, Azure, GCP) Terraform will use.
2️⃣ resource → Used to create and manage actual infrastructure (like EC2, S3).
3️⃣ variable → Declares inputs to make configurations reusable.
4️⃣ output → Displays or exports values after applying (like instance IP).
5️⃣ data → Reads existing resources without creating new ones.
6️⃣ module → Groups multiple resources into reusable components.
7️⃣ locals → Stores temporary or computed values.
8️⃣ depends_on → Ensures one resource is created before another.
9️⃣ lifecycle → Controls behavior (e.g., prevent_destroy, create_before_destroy).
🔟 provisioner → Runs commands/scripts after a resource is created.

=============================================================================================
========================================TIMESTAMP============================================
=============================================================================================

32:52 :: Terraform

Why Terraform used? 
-->
Suppose we want to create infra for testing server so we will make replica of Dev server , after that same replica for UAT , preprod and Prod.
So by doing it manually we will use terraform where with only same script we can build full infra.
If we want to build new Project then also it will be useful for full setup of infra we can build it with help of these previous scripts.

+++52:22 ::

At 8 IAM creation

At 33 create instance ec2 

Steps :- in 43 architecture is there

-in vs code create main.tf file for terraform

-now for connecting cloud services like aws/google cloud first define provider block

Note:- search in cpt provider block+ secret key + access key for aws --> Define IAM user as well and create role with admin access permissions --> will get access key and secret key


IMP++++

- after writing code/hcl type below commands:- 

*1) for installing packages written inside provider block and generates terraform.lock.hcl file which contains plugins details ->
Terraform init 

*2) for validating configurations ->
Terraform validate

*3) for recorrecting format /indentations ->
Terraform fmt 

*4)Generating plan document  -->
 Terraform plan
//Which contains project details stored in form of json inside terraform.tfstate file

*5) saves plan document in tplan file so u can use this same in other projects/env. 
Terraform plan -out=tplan 

*6)Generates JSON structure and genrates resources in aws ->
Terraform apply 

*7) To destroy all resources ->
Terraform destroy

+++ 28 ::: Practical

1) Create a folder for each env uat,dev,prod

In uat create provider.tf,.... 
In prod same

2) To access in terminal :-

Right click to folder(uat) --> open in integrated terminal --> start typing commands
Create input variable for passing values for Ami , instance type, ...

Steps in short for terraform:- init(for starting plugin connection only) --> plan --> apply

Note :- create diff files for diff thing 

Eg:- 
provider.tf for plugin,
Input.tf for variable setting,
main.tf for resources

13 se dekh

Tag name :- instance name if creating aws instance and in resources we are mentioning logical name to find it easily

47:50 ::: practical till 20 

Full terraform in one folder till 20 time 

22 pe structure to create terraform in MNC


======================================================================================================================
PRACTICAL steps for uat,dev,... simple demo PRACTICAL
======================================================================================================================

1) create IAM user and attach policy admin access 
2) create access key for particular user --> local code .
user :- terraform-user
acces key :-  /impdoc
secret key :- /impdoc
3) terraform init --> terraform validate --> terraform fmt --> terraform plan --> terraform apply

======================================================================================================================
PRACTICAL steps for Modules wise,... PRACTICAL
======================================================================================================================
Modules In Terraform (Project) will help developer organize the code for easy maintability of project
______________________________________________________________________________________________________

Step-1 : Create Project directory

        Ex: tcs

Step-2 : Create "modules" directory inside project directory tcs

        Ex: tcs
                - modules

Step-3 : Create "ec2" and "s3" directories inside (modules) directory

        Ex :   -tcs
                 - modules
                     - ec2
                     - s3

Step-4 : Create terraform scripts inside "ec2" directory

            inputs.tf
            main.tf
            outputs.tf         

Step-5 : Create terraform scripts inside "s3" directory

            inputs.tf
            main.tf
            outputs.tf          


Step-6 : create "provider.tf" file in root module tcs


Step-7 : create "main.tf" file in root module and invoke child modules from root module using the following

module "my_ec2"{
    source = "./modules/ec2"
}

module "my_s3" {
    source = "./modules/s3"
}


Step-8: Create "ouputs.tf" in project root module and access child modules related outputs.

output "test_vm_public_ip"{
    value = module.my_ec2.a1
}

output "test_vm_private_ip" {
    value = module.my_ec2.a2
}

Note: here a1 and a2 are ouput variables declared in ec2 module ouputs.tf file


